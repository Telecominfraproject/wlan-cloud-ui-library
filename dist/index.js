!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("react"),require("prop-types"),require("antd"),require("@ant-design/icons"),require("react-router-dom")):"function"==typeof define&&define.amd?define("connectus-ui-lib",["react","prop-types","antd","@ant-design/icons","react-router-dom"],n):"object"==typeof exports?exports["connectus-ui-lib"]=n(require("react"),require("prop-types"),require("antd"),require("@ant-design/icons"),require("react-router-dom")):e["connectus-ui-lib"]=n(e.React,e["prop-types"],e.antd,e["@ant-design/icons"],e["react-router-dom"])}(window,(function(e,n,t,o,r){return function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/dist/",t(t.s=13)}([function(n,t){n.exports=e},function(e,t){e.exports=n},function(e,n){e.exports=t},function(e,n,t){var o=t(8),r=t(11);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1},i=(o(r,a),r.locals?r.locals:{});e.exports=i},function(e,n){e.exports=o},function(e,n){e.exports=r},function(e,n,t){var o=t(8),r=t(10);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1},i=(o(r,a),r.locals?r.locals:{});e.exports=i},function(e,n,t){var o=t(8),r=t(12);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1},i=(o(r,a),r.locals?r.locals:{});e.exports=i},function(e,n,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function l(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},o=[],r=0;r<e.length;r++){var a=e[r],c=n.base?a[0]+n.base:a[0],s=t[c]||0,u="".concat(c," ").concat(s);t[c]=s+1;var d=l(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:u,updater:g(p,n),references:1}),o.push(u)}return o}function s(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var u,d=(u=[],function(e,n){return u[e]=n,u.filter(Boolean).join("\n")});function p(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(n,r);else{var a=document.createTextNode(r),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function m(e,n,t){var o=t.css,r=t.media,a=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,_=0;function g(e,n){var t,o,r;if(n.singleton){var a=_++;t=f||(f=s(n)),o=p.bind(null,t,a,!1),r=p.bind(null,t,a,!0)}else t=s(n),o=m.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=l(t[o]);i[r].references--}for(var a=c(e,n),s=0;s<t.length;s++){var u=l(t[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}t=a}}}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var r=(i=o,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),a=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([r]).join("\n")}var i,l,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);o&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},function(e,n,t){(n=t(9)(!0)).push([e.i,".GlobalHeader-module__GlobalHeader___3DdAt{height:64px;left:234px;padding:0;position:fixed;display:flex;right:0;z-index:2000}.GlobalHeader-module__GlobalHeader___3DdAt.GlobalHeader-module__collapsed___1eu85{left:80px}.GlobalHeader-module__GlobalHeader___3DdAt.GlobalHeader-module__mobile___3ifCy{left:0}.GlobalHeader-module__GlobalHeader___3DdAt .ant-row{margin-bottom:10px}.GlobalHeader-module__GlobalHeader___3DdAt .ant-row:last-child{margin-bottom:0px}.GlobalHeader-module__LogoContainer___vVDpT{height:100%;display:flex;justify-content:center;align-items:center;padding:0 0 0 24px}.GlobalHeader-module__LogoContainer___vVDpT img{border-radius:5px}.GlobalHeader-module__MenuIcon___Q-cWA{cursor:pointer;font-size:18px;line-height:64px;padding:0 24px}.GlobalHeader-module__RightMenu___ciIt8{margin-left:auto}\n","",{version:3,sources:["/Users/sean/cu-ui/src/components/GlobalHeader/GlobalHeader.module.scss","/Users/sean/cu-ui/src/styles/variables.scss"],names:[],mappings:"AAEA,2CACE,WCAkB,CDClB,UCJmB,CDKnB,SAAU,CACV,cAAe,CACf,YAAa,CACb,OAAQ,CACR,YAAa,CAPf,kFAUI,SCX0B,CDC9B,+EAaI,MAAO,CAbX,oDAiBI,kBAAmB,CAjBvB,+DAoBM,iBAAkB,CACnB,4CAKH,WAAY,CACZ,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,kBAAmB,CALrB,gDAQI,iBAAkB,CACnB,uCAID,cAAe,CACf,cAAe,CACf,gBAAiB,CACjB,cAAe,CAChB,wCAGC,gBAAiB",file:"GlobalHeader.module.scss",sourcesContent:["@import 'styles/variables';\n\n.GlobalHeader {\n  height: $header-height;\n  left: $sidebar-width;\n  padding: 0;\n  position: fixed;\n  display: flex;\n  right: 0;\n  z-index: 2000;\n\n  &.collapsed {\n    left: $sidebar-collapsed-width;\n  }\n  &.mobile {\n    left: 0;\n  }\n\n  :global(.ant-row) {\n    margin-bottom: 10px;\n\n    &:last-child {\n      margin-bottom: 0px;\n    }\n  }\n}\n\n.LogoContainer {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 0 0 24px;\n\n  img {\n    border-radius: 5px;\n  }\n}\n\n.MenuIcon {\n  cursor: pointer;\n  font-size: 18px;\n  line-height: 64px;\n  padding: 0 24px;\n}\n\n.RightMenu {\n  margin-left: auto;\n}","$sidebar-width: 234px;\n$sidebar-collapsed-width: 80px;\n\n$header-height: 64px;"]}]),n.locals={GlobalHeader:"GlobalHeader-module__GlobalHeader___3DdAt",collapsed:"GlobalHeader-module__collapsed___1eu85",mobile:"GlobalHeader-module__mobile___3ifCy",LogoContainer:"GlobalHeader-module__LogoContainer___vVDpT",MenuIcon:"GlobalHeader-module__MenuIcon___Q-cWA",RightMenu:"GlobalHeader-module__RightMenu___ciIt8"},e.exports=n},function(e,n,t){(n=t(9)(!0)).push([e.i,".Sider-module__Sider___2HIFH{height:100vh;left:0;position:fixed}.Sider-module__Sider___2HIFH.Sider-module__Mobile___1CS61{position:relative}.Sider-module__Sider___2HIFH.Sider-module__collapsed___3N3dW .Sider-module__Logo___OoUqJ{width:32px}.Sider-module__Sider___2HIFH .Sider-module__TopArea___36FBf{height:64px}.Sider-module__Sider___2HIFH .Sider-module__LogoContainer___MjsOi{height:100%;display:flex;justify-content:center;align-items:center}.Sider-module__Sider___2HIFH .Sider-module__Logo___OoUqJ{width:200px;border-radius:5px}.Sider-module__Sider___2HIFH .Sider-module__MenuIcon___3iNN4{margin-right:10px !important}\n","",{version:3,sources:["/Users/sean/cu-ui/src/components/SideMenu/Sider.module.scss","/Users/sean/cu-ui/src/styles/variables.scss"],names:[],mappings:"AAEA,6BACE,YAAa,CACb,MAAO,CACP,cAAe,CAHjB,0DAMI,iBAAkB,CANtB,yFAWM,UAAW,CAXjB,4DAgBI,WCfgB,CDDpB,kEAoBI,WAAY,CACZ,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CAvBvB,yDA2BI,WAAY,CACZ,iBAAkB,CA5BtB,6DAgCI,4BAA4B",file:"Sider.module.scss",sourcesContent:["@import 'styles/variables';\n\n.Sider {\n  height: 100vh;\n  left: 0;\n  position: fixed;\n\n  &.Mobile {\n    position: relative;\n  }\n\n  &.collapsed {\n    .Logo {\n      width: 32px;\n    }\n  }\n\n  .TopArea {\n    height: $header-height;\n  }\n\n  .LogoContainer {\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .Logo {\n    width: 200px;\n    border-radius: 5px;\n  }\n\n  .MenuIcon {\n    margin-right: 10px!important;\n  }\n}\n","$sidebar-width: 234px;\n$sidebar-collapsed-width: 80px;\n\n$header-height: 64px;"]}]),n.locals={Sider:"Sider-module__Sider___2HIFH",Mobile:"Sider-module__Mobile___1CS61",collapsed:"Sider-module__collapsed___3N3dW",Logo:"Sider-module__Logo___OoUqJ",TopArea:"Sider-module__TopArea___36FBf",LogoContainer:"Sider-module__LogoContainer___MjsOi",MenuIcon:"Sider-module__MenuIcon___3iNN4"},e.exports=n},function(e,n,t){(n=t(9)(!0)).push([e.i,".AppLayout-module__MainLayout___2yplr{height:100vh;margin-left:234px;overflow:auto}.AppLayout-module__MainLayout___2yplr.AppLayout-module__collapsed___TkeP0{margin-left:80px}.AppLayout-module__MainLayout___2yplr.AppLayout-module__mobile___U70sC{margin-left:0}.AppLayout-module__Content___3rjzk{margin-top:64px}.AppLayout-module__Footer___3eiUm{text-align:center}\n","",{version:3,sources:["/Users/sean/cu-ui/src/containers/AppLayout/AppLayout.module.scss","/Users/sean/cu-ui/src/styles/variables.scss"],names:[],mappings:"AAEA,sCACE,YAAa,CACb,iBCJmB,CDKnB,aAAc,CAHhB,0EAMI,gBCP0B,CDC9B,uEASI,aAAc,CACf,mCAID,eCbkB,CDcnB,kCAGC,iBAAkB",file:"AppLayout.module.scss",sourcesContent:["@import 'styles/variables';\n\n.MainLayout {\n  height: 100vh;\n  margin-left: $sidebar-width;\n  overflow: auto;\n\n  &.collapsed {\n    margin-left: $sidebar-collapsed-width;\n  }\n  &.mobile {\n    margin-left: 0;\n  }\n}\n\n.Content {\n  margin-top: $header-height;\n}\n\n.Footer {\n  text-align: center;\n}\n","$sidebar-width: 234px;\n$sidebar-collapsed-width: 80px;\n\n$header-height: 64px;"]}]),n.locals={MainLayout:"AppLayout-module__MainLayout___2yplr",collapsed:"AppLayout-module__collapsed___TkeP0",mobile:"AppLayout-module__mobile___U70sC",Content:"AppLayout-module__Content___3rjzk",Footer:"AppLayout-module__Footer___3eiUm"},e.exports=n},function(e,n,t){"use strict";t.r(n),t.d(n,"AppLayout",(function(){return j})),t.d(n,"Dashboard",(function(){return H}));var o=t(0),r=t.n(o),a=t(1),i=t.n(a),l=t(2),c=t(5),s=t(4),u=t(6),d=t.n(u);function p(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var t=[],o=!0,r=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(o=(i=l.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==l.return||l.return()}finally{if(r)throw a}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var m=l.Layout.Header,f=function(e){var n=e.collapsed,t=e.onMenuButtonClick,a=e.isMobile,i=e.logoMobile,u=p(Object(o.useState)(!1),2),f=u[0],_=u[1],g=function(){_(!1)},h=r.a.createElement(r.a.Fragment,null,r.a.createElement(l.Row,null,r.a.createElement(c.Link,{onClick:g,to:"/accounts/customers/view"},"Profile")),r.a.createElement(l.Row,null,r.a.createElement(c.Link,{onClick:g,to:"/account"},"Users")),r.a.createElement(l.Row,null,r.a.createElement(c.Link,{onClick:g,to:"/accounts"},"Advanced")),r.a.createElement(l.Row,null,r.a.createElement(c.Link,{onClick:g,to:"/accounts/customersxw"},"Rules Preference")));return r.a.createElement(m,{className:"".concat(d.a.GlobalHeader," ").concat(n?d.a.collapsed:""," ").concat(a?d.a.mobile:"")},a&&[r.a.createElement(c.Link,{className:d.a.LogoContainer,to:"/",key:"mobileLogo"},r.a.createElement("img",{src:i,alt:"logo",width:"32"}))],n?r.a.createElement(s.MenuUnfoldOutlined,{className:d.a.MenuIcon,onClick:t}):r.a.createElement(s.MenuFoldOutlined,{className:d.a.MenuIcon,onClick:t}),r.a.createElement("div",{className:d.a.RightMenu},r.a.createElement(l.Popover,{content:h,trigger:"click",getPopupContainer:function(e){return e.parentElement},visible:f,onVisibleChange:function(e){_(e)},placement:"bottomRight",arrowPointAtCenter:!0},r.a.createElement(s.SettingOutlined,{className:d.a.MenuIcon}))))};f.propTypes={collapsed:i.a.bool.isRequired,onMenuButtonClick:i.a.func.isRequired,isMobile:i.a.bool.isRequired,logoMobile:i.a.string.isRequired};var _=f,g=t(3),h=t.n(g);function b(){return(b=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function A(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function y(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var t=[],o=!0,r=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(o=(i=l.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==l.return||l.return()}finally{if(r)throw a}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var C=l.Layout.Sider,v=l.Menu.SubMenu,x=l.Menu.Item,M=["accounts","network","configuration","insights","system","history"],k=function(e){var n=e.locationState,t=e.collapsed,a=e.isMobile,i=e.logo,u=e.logoMobile,d=e.onMenuButtonClick,p=e.onMenuItemClick,m=e.onLogout,f=y(Object(o.useState)([]),2),_=f[0],g=f[1];Object(o.useEffect)((function(){g([])}),[t]);var k=[{key:"dashboard",icon:r.a.createElement(s.DashboardOutlined,{className:h.a.MenuIcon}),path:"/",text:"Dashboard",onClick:p},{key:"profiles",icon:r.a.createElement(s.ProfileOutlined,{className:h.a.MenuIcon}),path:"/profiles",text:"Profiles",onClick:p},{key:"reports",icon:r.a.createElement(s.AreaChartOutlined,{className:h.a.MenuIcon}),path:"/analytics/qoe",text:"Insights",onClick:p},{key:"client-devices",icon:r.a.createElement(s.MobileOutlined,{className:h.a.MenuIcon}),path:"/network/client-devices",text:"Client Devices",onClick:p},{key:"network-elements",icon:r.a.createElement(s.ApiOutlined,{className:h.a.MenuIcon}),path:"/network/elements",text:"Network Elements",onClick:p},{key:"alarms",icon:r.a.createElement(s.NotificationOutlined,{className:h.a.MenuIcon}),path:"/network/alarms",text:"Alarms",onClick:p},{key:"recommendations",icon:r.a.createElement(s.CheckCircleOutlined,{className:h.a.MenuIcon}),path:"/recommendations",text:"Recommendations",onClick:p},{key:"settings",icon:r.a.createElement(s.SettingOutlined,{className:h.a.MenuIcon}),path:"/settings",text:"Settings",onClick:p},{key:"accounts",icon:r.a.createElement(s.TeamOutlined,{className:h.a.MenuIcon}),text:"Customers",path:"/accounts/customers",onClick:p}],S=[{key:"logout",icon:r.a.createElement(s.LogoutOutlined,{className:h.a.MenuIcon}),path:"/signout",text:"Sign Out",onClick:m}],B=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{items:[]},o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=[],i=[],l=A(o);return t.items.forEach((function(o){if(o&&o.key)if(o.children){var s=e({items:o.children,parent:o});s.selectedKeys&&s.selectedKeys.length&&(l=[].concat(A(l),A(s.selectedKeys))),s.openKeys&&s.openKeys.length&&(i=[].concat(A(i),A(s.openKeys))),a.push(r.a.createElement(v,{key:o.key,title:r.a.createElement("span",null,o.icon,r.a.createElement("span",null,o.text))},s.items))}else{var u=o.Component||x,d=function(e){var n=b({},e);return r.a.createElement(c.Link,n)};o.LinkComponent&&(d=o.LinkComponent);var p=n.pathname,m="".concat(p).concat(n.hash);(p.startsWith(o.path)||m.startsWith(o.path))&&(t.parent&&i.push(t.parent.key),l.push(o.key.toString())),a.push(r.a.createElement(u,{key:o.key,className:"ant-menu-item"},r.a.createElement(d,{onClick:o.onClick,to:o.path},o.icon,r.a.createElement("span",null,o.text))))}})),{items:a,selectedKeys:l,keys:i}}({items:[].concat(k,S)}),E=r.a.createElement(C,{collapsed:!a&&t,width:"234px",collapsedWidth:"80px",breakpoint:"lg",className:"".concat(h.a.Sider," ").concat(t?h.a.collapsed:"","  ").concat(a?h.a.Mobile:"")},r.a.createElement("div",{className:h.a.TopArea},r.a.createElement(c.Link,{className:h.a.LogoContainer,to:"/"},r.a.createElement("img",{className:h.a.Logo,alt:"ConnectUs",src:t?u:i}))),r.a.createElement(l.Menu,{className:"sidemenu",selectedKeys:B.selectedKeys,defaultOpenKeys:B.openKeys,onOpenChange:function(e){var n=e.find((function(e){return!_.includes(e)}));-1===M.indexOf(n)?g(e):g(n?[n]:[])},mode:"inline",theme:"dark"},B.items));return a?r.a.createElement(l.Drawer,{zIndex:9999,placement:"left",closable:!1,visible:!t,onClose:d,bodyStyle:{padding:0},width:256},E):E};k.propTypes={locationState:i.a.instanceOf(Object).isRequired,collapsed:i.a.bool.isRequired,isMobile:i.a.bool.isRequired,logo:i.a.string.isRequired,logoMobile:i.a.string.isRequired,onMenuButtonClick:i.a.func.isRequired,onMenuItemClick:i.a.func.isRequired,onLogout:i.a.func.isRequired};var S=k,B=t(7),E=t.n(B);function w(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var t=[],o=!0,r=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(o=(i=l.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==l.return||l.return()}finally{if(r)throw a}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var L=l.Layout.Content,I=l.Layout.Footer,O=function(e){var n=e.children,t=e.logo,a=e.logoMobile,i=e.locationState,c=e.onLogout,s=w(Object(o.useState)(!1),2),u=s[0],d=s[1],p=w(Object(o.useState)(!1),2),m=p[0],f=p[1],g=w(Object(o.useState)("lg"),2),h=g[0],b=g[1],A=(new Date).getFullYear(),y=function(){var e=window.innerWidth;e<768&&"sm"!==h?(d(!0),f(!0),b("sm")):e>=768&&e<992&&"md"!==h?(d(!0),f(!1),b("md")):e>=992&&"lg"!==h&&(d(!1),f(!1),b("lg"))},C=function(){d(!u)};return Object(o.useEffect)((function(){return y(),window.addEventListener("resize",y),function(){return window.removeEventListener("resize",y)}}),[]),Object(o.useEffect)((function(){return window.addEventListener("resize",y),function(){return window.removeEventListener("resize",y)}}),[h]),r.a.createElement(l.Layout,null,r.a.createElement(S,{locationState:i,collapsed:u,isMobile:m,logo:t,logoMobile:a,onMenuButtonClick:C,onMenuItemClick:function(){!0===m&&d(!0)},onLogout:function(){c()}}),r.a.createElement(l.Layout,{className:"".concat(E.a.MainLayout," ").concat(u?E.a.collapsed:""," ").concat(m?E.a.mobile:"")},r.a.createElement(_,{collapsed:u,isMobile:m,logoMobile:a,onMenuButtonClick:C}),r.a.createElement(L,{className:E.a.Content},n),r.a.createElement(I,{className:E.a.Footer},"Copyright © ",A," ConnectUs Inc. All Rights Reserved.")))};O.propTypes={children:i.a.node.isRequired,logo:i.a.string.isRequired,logoMobile:i.a.string.isRequired,onLogout:i.a.func.isRequired,locationState:i.a.instanceOf(Object).isRequired};var j=O,H=function(){return r.a.createElement("h1",null,"Dashboard")}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,