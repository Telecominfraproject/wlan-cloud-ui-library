import React from 'react';
import '@testing-library/jest-dom/extend-expect';
import { cleanup } from '@testing-library/react';
import { render } from 'tests/utils';
import OS from '..';

const mockProps = {
  data: {
    alarms: [],
    alarmsCount: 0,
    baseMacAddress: '74:9c:e3:44:03:8c',
    customerId: '2',
    details: {
      advancedRadioMap: {
        is2dot4GHz: {
          activeScanSettings: {
            model_type: 'ActiveScanSettings',
            enabled: true,
            scanFrequencySeconds: 10,
            scanDurationMillis: 65,
          },
          autoChannelSelection: 'disabled',
          beaconInterval: 100,
          bestApSettings: {
            model_type: 'RadioBestApSettings',
            mlComputed: true,
            dropInSnrPercentage: 20,
            minLoadFactor: 50,
          },
          channelHopSettings: {
            model_type: 'ChannelHopSettings',
            noiseFloorThresholdInDB: -75,
            noiseFloorThresholdTimeInSeconds: 180,
            nonWifiThresholdInPercentage: 50,
            nonWifiThresholdTimeInSeconds: 180,
            obssHopMode: 'NON_WIFI',
          },
          deauthAttackDetection: null,
          forceScanDuringVoice: 'disabled',
          fragmentationThresholdBytes: 2346,
          legacyBSSRate: 'enabled',
          managementRate: 'auto',
          maxNumClients: 100,
          mimoMode: 'twoByTwo',
          model_type: 'RadioConfiguration',
          multicastRate: 'auto',
          radioAdminState: 'enabled',
          radioMode: 'modeN',
          radioType: 'is2dot4GHz',
          rtsCtsThreshold: 65535,
          stationIsolation: 'disabled',
          uapsdState: 'enabled',
          wmmState: 'enabled',
        },
        is5GHzL: {
          activeScanSettings: {
            model_type: 'ActiveScanSettings',
            enabled: true,
            scanFrequencySeconds: 10,
            scanDurationMillis: 65,
          },
          autoChannelSelection: 'disabled',
          beaconInterval: 100,
          bestApSettings: {
            model_type: 'RadioBestApSettings',
            mlComputed: true,
            dropInSnrPercentage: 30,
            minLoadFactor: 40,
          },
          channelHopSettings: {
            model_type: 'ChannelHopSettings',
            noiseFloorThresholdInDB: -75,
            noiseFloorThresholdTimeInSeconds: 180,
            nonWifiThresholdInPercentage: 50,
            nonWifiThresholdTimeInSeconds: 180,
            obssHopMode: 'NON_WIFI',
          },
          deauthAttackDetection: null,
          forceScanDuringVoice: 'disabled',
          fragmentationThresholdBytes: 2346,
          legacyBSSRate: 'enabled',
          managementRate: 'auto',
          maxNumClients: 100,
          mimoMode: 'twoByTwo',
          model_type: 'RadioConfiguration',
          multicastRate: 'auto',
          radioAdminState: 'enabled',
          radioMode: 'modeAC',
          radioType: 'is5GHzL',
          rtsCtsThreshold: 65535,
          stationIsolation: 'disabled',
          uapsdState: 'enabled',
          wmmState: 'enabled',
        },
        is5GHzU: {
          activeScanSettings: {
            model_type: 'ActiveScanSettings',
            enabled: true,
            scanFrequencySeconds: 10,
            scanDurationMillis: 65,
          },
          autoChannelSelection: 'disabled',
          beaconInterval: 100,
          bestApSettings: {
            model_type: 'RadioBestApSettings',
            mlComputed: true,
            dropInSnrPercentage: 30,
            minLoadFactor: 40,
          },
          channelHopSettings: {
            model_type: 'ChannelHopSettings',
            noiseFloorThresholdInDB: -75,
            noiseFloorThresholdTimeInSeconds: 180,
            nonWifiThresholdInPercentage: 50,
            nonWifiThresholdTimeInSeconds: 180,
            obssHopMode: 'NON_WIFI',
          },
          deauthAttackDetection: null,
          forceScanDuringVoice: 'disabled',
          fragmentationThresholdBytes: 2346,
          legacyBSSRate: 'enabled',
          managementRate: 'auto',
          maxNumClients: 100,
          mimoMode: 'twoByTwo',
          model_type: 'RadioConfiguration',
          multicastRate: 'auto',
          radioAdminState: 'enabled',
          radioMode: 'modeAC',
          radioType: 'is5GHzU',
          rtsCtsThreshold: 65535,
          stationIsolation: 'disabled',
          uapsdState: 'enabled',
          wmmState: 'enabled',
        },
      },
      antennaType: 'OMNI',
      costSavingEventsEnabled: true,
      deploymentType: 'CEILING',
      deviceMode: 'standaloneAP',
      deviceName: 'Default Device Name',
      elementConfigVersion: 'AP-V1',
      equipmentModel: 'ecw5211',
      equipmentType: 'AP',
      forwardMode: 'BRIDGE',
      frameReportThrottleEnabled: true,
      gettingDNS: 'dhcp',
      gettingIP: 'dhcp',
      locallyConfigured: false,
      locallyConfiguredMgmtVlan: 0,
      locationData: null,
      model_type: 'ApElementConfiguration',
      peerInfoList: [],
      radioMap: {
        is2dot4GHz: {
          activeChannel: 6,
          allowedChannels: [],
          allowedChannelsPowerLevels: [],
          autoChannelSelection: true,
          backupChannelNumber: 11,
          bannedChannels: [],
          bestAPSteerType: 'both',
          bestApEnabled: null,
          channelBandwidth: 'is20MHz',
          channelNumber: 6,
          clientDisconnectThresholdDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
          deauthAttackDetection: null,
          eirpTxPower: { model_type: 'AutoOrManualValue', auto: true, value: 18 },
          manualChannelNumber: 6,
          minAutoCellSize: -80,
          model_type: 'ElementRadioConfiguration',
          neighbouringListApConfig: {
            model_type: 'NeighbouringAPListConfiguration',
            minSignal: -85,
            maxAps: 25,
          },
          perimeterDetectionEnabled: true,
          probeResponseThresholdDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
          radioType: 'is2dot4GHz',
          rxCellSizeDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
        },
        is5GHzL: {
          activeChannel: 36,
          allowedChannels: [],
          allowedChannelsPowerLevels: [],
          autoChannelSelection: true,
          backupChannelNumber: 44,
          bannedChannels: [],
          bestAPSteerType: 'both',
          bestApEnabled: null,
          channelBandwidth: 'is80MHz',
          channelNumber: 36,
          clientDisconnectThresholdDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
          deauthAttackDetection: null,
          eirpTxPower: { model_type: 'AutoOrManualValue', auto: true, value: 18 },
          manualChannelNumber: 36,
          minAutoCellSize: -80,
          model_type: 'ElementRadioConfiguration',
          neighbouringListApConfig: {
            model_type: 'NeighbouringAPListConfiguration',
            minSignal: -85,
            maxAps: 25,
          },
          perimeterDetectionEnabled: true,
          probeResponseThresholdDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
          radioType: 'is5GHzL',
          rxCellSizeDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
        },
        is5GHzU: {
          activeChannel: 149,
          allowedChannels: [],
          allowedChannelsPowerLevels: [],
          autoChannelSelection: true,
          backupChannelNumber: 154,
          bannedChannels: [],
          bestAPSteerType: 'both',
          bestApEnabled: null,
          channelBandwidth: 'is80MHz',
          channelNumber: 149,
          clientDisconnectThresholdDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
          deauthAttackDetection: null,
          eirpTxPower: { model_type: 'AutoOrManualValue', auto: true, value: 18 },
          manualChannelNumber: 149,
          minAutoCellSize: -80,
          model_type: 'ElementRadioConfiguration',
          neighbouringListApConfig: {
            model_type: 'NeighbouringAPListConfiguration',
            minSignal: -85,
            maxAps: 25,
          },
          perimeterDetectionEnabled: true,
          probeResponseThresholdDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
          radioType: 'is5GHzU',
          rxCellSizeDb: { model_type: 'AutoOrManualValue', auto: true, value: -90 },
        },
      },
      staticDnsIp1: null,
      staticDnsIp2: null,
      staticIP: null,
      staticIpGw: null,
      staticIpMaskCidr: null,
      syntheticClientEnabled: null,
    },
    equipmentType: 'AP',
    id: '1',
    inventoryId: 'ap-1',
    lastModifiedTimestamp: '1596059378208',
    latitude: null,
    locationId: '4',
    longitude: null,
    manufacturer: 'KodaCloud Canada Inc.',
    model: 'ecw5211',
    name: 'AP 1',
    profile: { name: 'ApProfile-3-radios', childProfiles: Array(1), __typename: 'Profile' },
    profileId: '6',
    serial: 'serial-ap-1',
    status: {
      clientDetails: { detailsJSON: {}, details: null, __typename: 'Status' },
      firmware: {
        detailsJSON: {
          bandPlan: null,
          baseMacAddress: {
            model_type: 'MacAddress',
            address: 'dJzjRAOM',
            addressAsString: '74:9c:e3:44:03:8c',
          },
          cloudCfgDataVersion: null,
          cloudProtocolVersion: null,
          countryCode: null,
          dataThrottleCfgModeChanged: null,
          ipBasedConfiguration: null,
          isApcConnected: null,
          lastApcUpdate: null,
          model_type: 'EquipmentProtocolStatusData',
          poweredOn: true,
          protocolState: 'ready',
          radiusProxyAddress: null,
          reportedApcAddress: null,
          reportedCC: null,
          reportedCfgDataVersion: null,
          reportedHwVersion: null,
          reportedIpV4Addr: '192.168.1.197',
          reportedIpV6Addr: 'fe80:0:0:0:218:b4ff:fe25:7096',
          reportedMacAddr: {
            model_type: 'MacAddress',
            address: 'dJzjRAOM',
            addressAsString: '74:9c:e3:44:03:8c',
          },
          reportedSku: null,
          reportedSwAltVersion: null,
          reportedSwVersion: null,
          serialNumber: 'serial-ap-1',
          statusDataType: 'PROTOCOL',
          systemContact: null,
          systemLocation: null,
          systemName: null,
          useTroubleshotThrottleConfig: null,
        },
        __typename: 'Status',
      },
      osPerformance: {
        detailsJSON: {
          avgCpuPerCore: [15.359832, 93.16686],
          avgCpuTemperature: 30.341064,
          avgCpuUtilization: 17.844086,
          avgFreeMemoryKb: 60050,
          model_type: 'OperatingSystemPerformance',
          numCamiCrashes: 0,
          statusDataType: 'OS_PERFORMANCE',
          totalAvailableMemoryKb: 512000,
          uptimeInSeconds: 6689,
        },
        __typename: 'Status',
      },
      protocol: {
        detailsJSON: {
          bandPlan: null,
          baseMacAddress: {
            model_type: 'MacAddress',
            address: 'dJzjRAOM',
            addressAsString: '74:9c:e3:44:03:8c',
          },
          cloudCfgDataVersion: null,
          cloudProtocolVersion: null,
          countryCode: null,
          dataThrottleCfgModeChanged: null,
          ipBasedConfiguration: null,
          isApcConnected: null,
          lastApcUpdate: null,
          model_type: 'EquipmentProtocolStatusData',
          poweredOn: true,
          protocolState: 'ready',
          radiusProxyAddress: null,
          reportedApcAddress: null,
          reportedCC: null,
          reportedCfgDataVersion: null,
          reportedHwVersion: null,
          reportedIpV4Addr: '192.168.1.197',
          reportedIpV6Addr: 'fe80:0:0:0:218:b4ff:fe25:7096',
          reportedMacAddr: {
            model_type: 'MacAddress',
            address: 'dJzjRAOM',
            addressAsString: '74:9c:e3:44:03:8c',
          },
          reportedSku: null,
          reportedSwAltVersion: null,
          reportedSwVersion: null,
          serialNumber: 'serial-ap-1',
          statusDataType: 'PROTOCOL',
          systemContact: null,
          systemLocation: null,
          systemName: null,
          useTroubleshotThrottleConfig: null,
        },
        details: { manufacturer: 'KodaCloud Canada Inc.', reportedMacAddr: '74:9c:e3:44:03:8c' },
        __typename: 'Status',
      },
      radioUtilization: { detailsJSON: {}, __typename: 'Status' },
      __typename: 'EquipmentStatus',
    },
    __typename: 'Equipment',
  },
  osData: {
    data: [],
    error: undefined,
    loading: false,
  },
  handleRefresh: () => {},
};

describe('<OS />', () => {
  afterEach(() => {
    cleanup();
  });

  it('should work with default props', async () => {
    render(<OS {...mockProps} />);
  });

  it('should work when detailsJSON object have few null values ', async () => {
    const mockDetails = {
      ...mockProps,
      data: {
        ...mockProps.data,
        status: {
          ...mockProps.data.status,
          osPerformance: {
            ...mockProps.data.status.osPerformance,
            detailsJSON: {
              ...mockProps.data.status.osPerformance.detailsJSON,
              avgFreeMemoryKb: null,
              totalAvailableMemoryKb: null,
              avgCpuUtilization: null,
              avgCpuTemperature: null,
              uptimeInSeconds: 3661,
            },
          },
        },
      },
    };
    render(<OS {...mockDetails} />);
  });

  it('should work with different time for uptimeInSeconds', async () => {
    const mockDetails = {
      ...mockProps,
      data: {
        ...mockProps.data,
        status: {
          ...mockProps.data.status,
          osPerformance: {
            ...mockProps.data.status.osPerformance,
            detailsJSON: {
              ...mockProps.data.status.osPerformance.detailsJSON,
              avgFreeMemoryKb: null,
              totalAvailableMemoryKb: null,
              avgCpuUtilization: null,
              avgCpuTemperature: null,
              uptimeInSeconds: 2 * 3600,
            },
          },
        },
      },
    };
    render(<OS {...mockDetails} />);
  });

  it('should work when data object is empty', async () => {
    const mockDetails = {
      ...mockProps,
      data: {},
    };
    render(<OS {...mockDetails} />);
  });
});
